datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  password String
  unit     Unit?  @relation(fields: [unitId], references: [id])
  unitId   Int?
  roleId   Int?
}

model Guardian {
  id           Int            @id @default(autoincrement())
  name         String
  cpf          String         @unique
  kinship      String
  phone        String
  Registration Registration[]
}

model Student {
  id           Int            @id @default(autoincrement())
  name         String
  cpf          String         @unique
  rg           String
  unit         Unit?          @relation(fields: [unitId], references: [id])
  unitId       Int?
  phone        String
  Record       Record[]
  Registration Registration[]
}

model Detail {
  id     Int    @id @default(autoincrement())
  author String
  unit   Unit?  @relation(fields: [unitId], references: [id])
  unitId Int?
  info   String

  Registration Registration[]
}

model Unit {
  id            Int            @id @default(autoincrement())
  name          String
  registrations Registration[]
  employees     User[]
  address       String
  phone1        String
  phone2        String
  Detail        Detail[]
  Class         Class[]
  Student       Student[]
}

model Registration {
  id         Int       @id @default(autoincrement())
  student    Student?  @relation(fields: [studentId], references: [id])
  studentId  Int?
  guardian   Guardian? @relation(fields: [guardianId], references: [id])
  guardianId Int?
  address    String
  phone1     String
  phone2     String
  details    Detail?   @relation(fields: [detailId], references: [id])
  detailId   Int?
  plots      Plots[]
  Class      Class[]
  Unit       Unit      @relation(fields: [unitId], references: [id])
  unitId     Int
  Record     Record[]
}

model Class {
  id            Int            @id @default(autoincrement())
  registrations Registration[]
  startDate     String
  endDate       String
  attendance    String
  unit          Unit?          @relation(fields: [unitId], references: [id])
  unitId        Int?
  teachers      String
  records       Record[]
}

model Record {
  id             Int           @id @default(autoincrement())
  class          Class?        @relation(fields: [classId], references: [id])
  classId        Int?
  course         Course?       @relation(fields: [courseId], references: [id])
  courseId       Int?
  attendance     String
  Student        Student?      @relation(fields: [studentId], references: [id])
  studentId      Int?
  Registration   Registration? @relation(fields: [registrationId], references: [id])
  registrationId Int?
}

model Course {
  id      Int    @id @default(autoincrement())
  name    String
  classes String
  price   String

  Record Record[]
}

model Plots {
  id             Int           @id @default(autoincrement())
  value          Float
  dueDate        DateTime
  createdData    DateTime
  status         String
  sendMethod     String
  Registration   Registration? @relation(fields: [registrationId], references: [id])
  registrationId Int?
}
